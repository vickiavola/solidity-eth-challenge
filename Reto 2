// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract PokemonFactory {
    struct Pokemon {
        uint8 id;
        string name;
    }
    Pokemon[] private pokemons;

    event eventNewPokemon (
       address creator,
       Pokemon newPokemon
   );

    
 modifier idValid(uint _id){
    require(
      _id > 0,
      "Sorry you need a new Id, it will be bigger that 0."
      );
    _;
  }

  modifier nameValid(string memory _name){
    require(
      bytes(_name).length > 2,
      "Sorry the new Pokemon need a Name, please write a name; it will be bigger that 2 letters."
      );
    _;
  }

    mapping (uint8 => address) public pokemonToOwner;
    mapping (address => uint8) ownerPokemonCount;

    function createPokemon (string memory _name, uint8 _id) public idValid(_id) nameValid(_name) {
        pokemons.push(Pokemon(_id, _name));
        pokemonToOwner[_id] = msg.sender;
        ownerPokemonCount[msg.sender]++;

     }

    function getAllPokemons() public view returns (Pokemon[] memory) {
        return pokemons;
    }

    function getResult() public pure returns(uint product, uint sum){
        uint a = 1; 
        uint b = 2;
        product = a * b;
        sum = a + b; 
   }


}
